services:
    bot:
        build:
            context: ..
            dockerfile: ./deploy/bot.Dockerfile
        ports:
            - "8081:8081"
        depends_on:
            database:
                condition: service_healthy
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    scrapper:
        build:
            context: ..
            dockerfile: ./deploy/scrapper.Dockerfile
        ports:
            - "8080:8080"
        depends_on:
            database:
                condition: service_healthy
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    database:
        image: postgres:17
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 2s
            timeout: 2s
            retries: 10
        volumes:
            - data:/var/lib/postgresql/data
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    redis:
        image: redis:8
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 5
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    zookeeper:
        image: confluentinc/cp-zookeeper:7.1.2
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_SERVERS: zookeeper:2888:3888
        networks:
            - backend
        
    kafka1:
        image: confluentinc/cp-kafka:7.1.2
        command: [ "bash", "-c", "/etc/confluent/docker/run >/log/stdout.log 2>/log/stderr.log" ]
        volumes:
            - ./containers-output/kafka1:/log
        hostname: kafka1
        container_name: kafka1
        ports:
            - "9092:9092"
            - "19092:19092"
            - "29092:29092"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        depends_on:
            - zookeeper
        networks:
            - backend
    
    kafka2:
        image: confluentinc/cp-kafka:7.1.2
        command: [ "bash", "-c", "/etc/confluent/docker/run >/log/stdout.log 2>/log/stderr.log" ]
        volumes:
            - ./containers-output/kafka2:/log
        hostname: kafka2
        container_name: kafka2
        ports:
            - "9093:9093"
            - "19093:19093"
            - "29093:29093"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_BROKER_ID: 2
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        depends_on:
            - zookeeper
        networks:
            - backend
    
    control-center:
        image: confluentinc/cp-enterprise-control-center:7.1.2
        container_name: control-center
        depends_on:
            - zookeeper
            - kafka1
            - kafka2
        ports:
            - "9021:9021"
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092,PLAINTEXT://kafka2:19093
            CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
            CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
            CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO
        networks:
            - backend
networks:
    backend:
        driver: bridge

volumes:
    data:
    redis-data: