//go:build go1.22

// Package scrapperapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package scrapperapi

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// AddLinkRequest defines model for AddLinkRequest.
type AddLinkRequest struct {
	Filters []string `json:"filters"`
	Link    string   `json:"link"`
	Tags    []string `json:"tags"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code         int    `json:"code"`
	Description  string `json:"description"`
	ErrorMessage string `json:"errorMessage"`
}

// LinkResponse defines model for LinkResponse.
type LinkResponse struct {
	Filters []string `json:"filters"`
	Id      int64    `json:"id"`
	Tags    []string `json:"tags"`
	Url     string   `json:"url"`
}

// ListLinksResponse defines model for ListLinksResponse.
type ListLinksResponse struct {
	Links []LinkResponse `json:"links"`
	Size  int            `json:"size"`
}

// RemoveLinkRequest defines model for RemoveLinkRequest.
type RemoveLinkRequest struct {
	Link string `json:"link"`
}

// DeleteLinksParams defines parameters for DeleteLinks.
type DeleteLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// PostLinksParams defines parameters for PostLinks.
type PostLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// DeleteLinksJSONRequestBody defines body for DeleteLinks for application/json ContentType.
type DeleteLinksJSONRequestBody = RemoveLinkRequest

// PostLinksJSONRequestBody defines body for PostLinks for application/json ContentType.
type PostLinksJSONRequestBody = AddLinkRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Убрать отслеживание ссылки
	// (DELETE /links)
	DeleteLinks(w http.ResponseWriter, r *http.Request, params DeleteLinksParams)
	// Получить все отслеживаемые ссылки
	// (GET /links)
	GetLinks(w http.ResponseWriter, r *http.Request, params GetLinksParams)
	// Добавить отслеживание ссылки
	// (POST /links)
	PostLinks(w http.ResponseWriter, r *http.Request, params PostLinksParams)
	// Удалить чат
	// (DELETE /tg-chat/{id})
	DeleteTgChatId(w http.ResponseWriter, r *http.Request, id int64)
	// Проверка регистрации чата
	// (GET /tg-chat/{id})
	GetTgChatId(w http.ResponseWriter, r *http.Request, id int64)
	// Зарегистрировать чат
	// (POST /tg-chat/{id})
	PostTgChatId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteLinks operation middleware
func (siw *ServerInterfaceWrapper) DeleteLinks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteLinksParams

	headers := r.Header

	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Tg-Chat-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tg-Chat-Id", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter Tg-Chat-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Tg-Chat-Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLinks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinksParams

	headers := r.Header

	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Tg-Chat-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tg-Chat-Id", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter Tg-Chat-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Tg-Chat-Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLinks operation middleware
func (siw *ServerInterfaceWrapper) PostLinks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLinksParams

	headers := r.Header

	// ------------- Required header parameter "Tg-Chat-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Tg-Chat-Id")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Tg-Chat-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Tg-Chat-Id", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tg-Chat-Id", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter Tg-Chat-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "Tg-Chat-Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLinks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTgChatId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTgChatId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTgChatId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTgChatId operation middleware
func (siw *ServerInterfaceWrapper) GetTgChatId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTgChatId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTgChatId operation middleware
func (siw *ServerInterfaceWrapper) PostTgChatId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTgChatId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/links", wrapper.DeleteLinks)
	m.HandleFunc("GET "+options.BaseURL+"/links", wrapper.GetLinks)
	m.HandleFunc("POST "+options.BaseURL+"/links", wrapper.PostLinks)
	m.HandleFunc("DELETE "+options.BaseURL+"/tg-chat/{id}", wrapper.DeleteTgChatId)
	m.HandleFunc("GET "+options.BaseURL+"/tg-chat/{id}", wrapper.GetTgChatId)
	m.HandleFunc("POST "+options.BaseURL+"/tg-chat/{id}", wrapper.PostTgChatId)

	return m
}
