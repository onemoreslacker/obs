// Code generated by mockery v2.53.2. DO NOT EDIT.

package scrappermocks

import (
	context "context"

	scrapperapi "github.com/es-debug/backend-academy-2024-go-template/internal/api/openapi/v1/servers/scrapper"
	mock "github.com/stretchr/testify/mock"
)

// MockUpdaterStorage is an autogenerated mock type for the Storage type
type MockUpdaterStorage struct {
	mock.Mock
}

type MockUpdaterStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdaterStorage) EXPECT() *MockUpdaterStorage_Expecter {
	return &MockUpdaterStorage_Expecter{mock: &_m.Mock}
}

// GetLinks provides a mock function with given fields: ctx, batch
func (_m *MockUpdaterStorage) GetLinks(ctx context.Context, batch uint64) ([]scrapperapi.LinkResponse, error) {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []scrapperapi.LinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]scrapperapi.LinkResponse, error)); ok {
		return rf(ctx, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []scrapperapi.LinkResponse); ok {
		r0 = rf(ctx, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]scrapperapi.LinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdaterStorage_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type MockUpdaterStorage_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
//   - ctx context.Context
//   - batch uint64
func (_e *MockUpdaterStorage_Expecter) GetLinks(ctx interface{}, batch interface{}) *MockUpdaterStorage_GetLinks_Call {
	return &MockUpdaterStorage_GetLinks_Call{Call: _e.mock.On("GetLinks", ctx, batch)}
}

func (_c *MockUpdaterStorage_GetLinks_Call) Run(run func(ctx context.Context, batch uint64)) *MockUpdaterStorage_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUpdaterStorage_GetLinks_Call) Return(_a0 []scrapperapi.LinkResponse, _a1 error) *MockUpdaterStorage_GetLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdaterStorage_GetLinks_Call) RunAndReturn(run func(context.Context, uint64) ([]scrapperapi.LinkResponse, error)) *MockUpdaterStorage_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// TouchLink provides a mock function with given fields: ctx, linkID
func (_m *MockUpdaterStorage) TouchLink(ctx context.Context, linkID int64) error {
	ret := _m.Called(ctx, linkID)

	if len(ret) == 0 {
		panic("no return value specified for TouchLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, linkID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpdaterStorage_TouchLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TouchLink'
type MockUpdaterStorage_TouchLink_Call struct {
	*mock.Call
}

// TouchLink is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID int64
func (_e *MockUpdaterStorage_Expecter) TouchLink(ctx interface{}, linkID interface{}) *MockUpdaterStorage_TouchLink_Call {
	return &MockUpdaterStorage_TouchLink_Call{Call: _e.mock.On("TouchLink", ctx, linkID)}
}

func (_c *MockUpdaterStorage_TouchLink_Call) Run(run func(ctx context.Context, linkID int64)) *MockUpdaterStorage_TouchLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUpdaterStorage_TouchLink_Call) Return(_a0 error) *MockUpdaterStorage_TouchLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdaterStorage_TouchLink_Call) RunAndReturn(run func(context.Context, int64) error) *MockUpdaterStorage_TouchLink_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLinkActivity provides a mock function with given fields: ctx, linkID, status
func (_m *MockUpdaterStorage) UpdateLinkActivity(ctx context.Context, linkID int64, status bool) error {
	ret := _m.Called(ctx, linkID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLinkActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, linkID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpdaterStorage_UpdateLinkActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLinkActivity'
type MockUpdaterStorage_UpdateLinkActivity_Call struct {
	*mock.Call
}

// UpdateLinkActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - linkID int64
//   - status bool
func (_e *MockUpdaterStorage_Expecter) UpdateLinkActivity(ctx interface{}, linkID interface{}, status interface{}) *MockUpdaterStorage_UpdateLinkActivity_Call {
	return &MockUpdaterStorage_UpdateLinkActivity_Call{Call: _e.mock.On("UpdateLinkActivity", ctx, linkID, status)}
}

func (_c *MockUpdaterStorage_UpdateLinkActivity_Call) Run(run func(ctx context.Context, linkID int64, status bool)) *MockUpdaterStorage_UpdateLinkActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockUpdaterStorage_UpdateLinkActivity_Call) Return(_a0 error) *MockUpdaterStorage_UpdateLinkActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdaterStorage_UpdateLinkActivity_Call) RunAndReturn(run func(context.Context, int64, bool) error) *MockUpdaterStorage_UpdateLinkActivity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdaterStorage creates a new instance of MockUpdaterStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdaterStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdaterStorage {
	mock := &MockUpdaterStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
