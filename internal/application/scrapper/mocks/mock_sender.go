// Code generated by mockery v2.53.2. DO NOT EDIT.

package scrappermocks

import (
	context "context"

	botclient "github.com/es-debug/backend-academy-2024-go-template/internal/api/openapi/v1/clients/bot"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

type MockSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSender) EXPECT() *MockSender_Expecter {
	return &MockSender_Expecter{mock: &_m.Mock}
}

// PostUpdates provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockSender) PostUpdates(ctx context.Context, body botclient.LinkUpdate, reqEditors ...botclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUpdates")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, botclient.LinkUpdate, ...botclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, botclient.LinkUpdate, ...botclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, botclient.LinkUpdate, ...botclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSender_PostUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdates'
type MockSender_PostUpdates_Call struct {
	*mock.Call
}

// PostUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - body botclient.LinkUpdate
//   - reqEditors ...botclient.RequestEditorFn
func (_e *MockSender_Expecter) PostUpdates(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockSender_PostUpdates_Call {
	return &MockSender_PostUpdates_Call{Call: _e.mock.On("PostUpdates",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockSender_PostUpdates_Call) Run(run func(ctx context.Context, body botclient.LinkUpdate, reqEditors ...botclient.RequestEditorFn)) *MockSender_PostUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]botclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(botclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(botclient.LinkUpdate), variadicArgs...)
	})
	return _c
}

func (_c *MockSender_PostUpdates_Call) Return(_a0 *http.Response, _a1 error) *MockSender_PostUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSender_PostUpdates_Call) RunAndReturn(run func(context.Context, botclient.LinkUpdate, ...botclient.RequestEditorFn) (*http.Response, error)) *MockSender_PostUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSender creates a new instance of MockSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSender {
	mock := &MockSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
