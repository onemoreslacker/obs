// Code generated by mockery v2.53.2. DO NOT EDIT.

package bot_test

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockTeletramBotAPI is an autogenerated mock type for the TelegramBotAPI type
type MockTeletramBotAPI struct {
	mock.Mock
}

type MockTeletramBotAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeletramBotAPI) EXPECT() *MockTeletramBotAPI_Expecter {
	return &MockTeletramBotAPI_Expecter{mock: &_m.Mock}
}

// GetUpdatesChan provides a mock function with given fields: config
func (_m *MockTeletramBotAPI) GetUpdatesChan(config tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatesChan")
	}

	var r0 tgbotapi.UpdatesChannel
	if rf, ok := ret.Get(0).(func(tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tgbotapi.UpdatesChannel)
		}
	}

	return r0
}

// MockTeletramBotAPI_GetUpdatesChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatesChan'
type MockTeletramBotAPI_GetUpdatesChan_Call struct {
	*mock.Call
}

// GetUpdatesChan is a helper method to define mock.On call
//   - config tgbotapi.UpdateConfig
func (_e *MockTeletramBotAPI_Expecter) GetUpdatesChan(config interface{}) *MockTeletramBotAPI_GetUpdatesChan_Call {
	return &MockTeletramBotAPI_GetUpdatesChan_Call{Call: _e.mock.On("GetUpdatesChan", config)}
}

func (_c *MockTeletramBotAPI_GetUpdatesChan_Call) Run(run func(config tgbotapi.UpdateConfig)) *MockTeletramBotAPI_GetUpdatesChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.UpdateConfig))
	})
	return _c
}

func (_c *MockTeletramBotAPI_GetUpdatesChan_Call) Return(_a0 tgbotapi.UpdatesChannel) *MockTeletramBotAPI_GetUpdatesChan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeletramBotAPI_GetUpdatesChan_Call) RunAndReturn(run func(tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel) *MockTeletramBotAPI_GetUpdatesChan_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: c
func (_m *MockTeletramBotAPI) Request(c tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *tgbotapi.APIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (*tgbotapi.APIResponse, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) *tgbotapi.APIResponse); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.APIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeletramBotAPI_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockTeletramBotAPI_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockTeletramBotAPI_Expecter) Request(c interface{}) *MockTeletramBotAPI_Request_Call {
	return &MockTeletramBotAPI_Request_Call{Call: _e.mock.On("Request", c)}
}

func (_c *MockTeletramBotAPI_Request_Call) Run(run func(c tgbotapi.Chattable)) *MockTeletramBotAPI_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTeletramBotAPI_Request_Call) Return(_a0 *tgbotapi.APIResponse, _a1 error) *MockTeletramBotAPI_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeletramBotAPI_Request_Call) RunAndReturn(run func(tgbotapi.Chattable) (*tgbotapi.APIResponse, error)) *MockTeletramBotAPI_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: c
func (_m *MockTeletramBotAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeletramBotAPI_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTeletramBotAPI_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockTeletramBotAPI_Expecter) Send(c interface{}) *MockTeletramBotAPI_Send_Call {
	return &MockTeletramBotAPI_Send_Call{Call: _e.mock.On("Send", c)}
}

func (_c *MockTeletramBotAPI_Send_Call) Run(run func(c tgbotapi.Chattable)) *MockTeletramBotAPI_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTeletramBotAPI_Send_Call) Return(_a0 tgbotapi.Message, _a1 error) *MockTeletramBotAPI_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeletramBotAPI_Send_Call) RunAndReturn(run func(tgbotapi.Chattable) (tgbotapi.Message, error)) *MockTeletramBotAPI_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeletramBotAPI creates a new instance of MockTeletramBotAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeletramBotAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeletramBotAPI {
	mock := &MockTeletramBotAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
