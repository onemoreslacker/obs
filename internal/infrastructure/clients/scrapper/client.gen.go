// Package scrapperclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package scrapperclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// AddLinkRequest defines model for AddLinkRequest.
type AddLinkRequest struct {
	Filters *[]string `json:"filters,omitempty"`
	Link    *string   `json:"link,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code         *int    `json:"code,omitempty"`
	Description  *string `json:"description,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// LinkResponse defines model for LinkResponse.
type LinkResponse struct {
	Filters *[]string `json:"filters,omitempty"`
	Id      *int64    `json:"id,omitempty"`
	Tags    *[]string `json:"tags,omitempty"`
	Url     *string   `json:"url,omitempty"`
}

// ListLinksResponse defines model for ListLinksResponse.
type ListLinksResponse struct {
	Links *[]LinkResponse `json:"links,omitempty"`
	Size  *int32          `json:"size,omitempty"`
}

// RemoveLinkRequest defines model for RemoveLinkRequest.
type RemoveLinkRequest struct {
	Link *string `json:"link,omitempty"`
}

// DeleteLinksParams defines parameters for DeleteLinks.
type DeleteLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// PostLinksParams defines parameters for PostLinks.
type PostLinksParams struct {
	TgChatId int64 `json:"Tg-Chat-Id"`
}

// DeleteLinksJSONRequestBody defines body for DeleteLinks for application/json ContentType.
type DeleteLinksJSONRequestBody = RemoveLinkRequest

// PostLinksJSONRequestBody defines body for PostLinks for application/json ContentType.
type PostLinksJSONRequestBody = AddLinkRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteLinksWithBody request with any body
	DeleteLinksWithBody(ctx context.Context, params *DeleteLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteLinks(ctx context.Context, params *DeleteLinksParams, body DeleteLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLinks request
	GetLinks(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLinksWithBody request with any body
	PostLinksWithBody(ctx context.Context, params *PostLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLinks(ctx context.Context, params *PostLinksParams, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTgChatId request
	DeleteTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTgChatId request
	GetTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTgChatId request
	PostTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteLinksWithBody(ctx context.Context, params *DeleteLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLinksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLinks(ctx context.Context, params *DeleteLinksParams, body DeleteLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLinksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLinks(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinksWithBody(ctx context.Context, params *PostLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLinks(ctx context.Context, params *PostLinksParams, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLinksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTgChatIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTgChatIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTgChatId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTgChatIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteLinksRequest calls the generic DeleteLinks builder with application/json body
func NewDeleteLinksRequest(server string, params *DeleteLinksParams, body DeleteLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteLinksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteLinksRequestWithBody generates requests for DeleteLinks with any type of body
func NewDeleteLinksRequestWithBody(server string, params *DeleteLinksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Tg-Chat-Id", runtime.ParamLocationHeader, params.TgChatId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Tg-Chat-Id", headerParam0)

	}

	return req, nil
}

// NewGetLinksRequest generates requests for GetLinks
func NewGetLinksRequest(server string, params *GetLinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Tg-Chat-Id", runtime.ParamLocationHeader, params.TgChatId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Tg-Chat-Id", headerParam0)

	}

	return req, nil
}

// NewPostLinksRequest calls the generic PostLinks builder with application/json body
func NewPostLinksRequest(server string, params *PostLinksParams, body PostLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLinksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostLinksRequestWithBody generates requests for PostLinks with any type of body
func NewPostLinksRequestWithBody(server string, params *PostLinksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/links")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Tg-Chat-Id", runtime.ParamLocationHeader, params.TgChatId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Tg-Chat-Id", headerParam0)

	}

	return req, nil
}

// NewDeleteTgChatIdRequest generates requests for DeleteTgChatId
func NewDeleteTgChatIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tg-chat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTgChatIdRequest generates requests for GetTgChatId
func NewGetTgChatIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tg-chat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTgChatIdRequest generates requests for PostTgChatId
func NewPostTgChatIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tg-chat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteLinksWithBodyWithResponse request with any body
	DeleteLinksWithBodyWithResponse(ctx context.Context, params *DeleteLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteLinksResponse, error)

	DeleteLinksWithResponse(ctx context.Context, params *DeleteLinksParams, body DeleteLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteLinksResponse, error)

	// GetLinksWithResponse request
	GetLinksWithResponse(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*GetLinksResponse, error)

	// PostLinksWithBodyWithResponse request with any body
	PostLinksWithBodyWithResponse(ctx context.Context, params *PostLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksResponse, error)

	PostLinksWithResponse(ctx context.Context, params *PostLinksParams, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksResponse, error)

	// DeleteTgChatIdWithResponse request
	DeleteTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteTgChatIdResponse, error)

	// GetTgChatIdWithResponse request
	GetTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetTgChatIdResponse, error)

	// PostTgChatIdWithResponse request
	PostTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostTgChatIdResponse, error)
}

type DeleteLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkResponse
	JSON400      *ApiErrorResponse
	JSON404      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLinksResponse
	JSON400      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkResponse
	JSON400      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTgChatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiErrorResponse
	JSON404      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTgChatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTgChatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTgChatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTgChatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTgChatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTgChatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostTgChatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTgChatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteLinksWithBodyWithResponse request with arbitrary body returning *DeleteLinksResponse
func (c *ClientWithResponses) DeleteLinksWithBodyWithResponse(ctx context.Context, params *DeleteLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteLinksResponse, error) {
	rsp, err := c.DeleteLinksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLinksResponse(rsp)
}

func (c *ClientWithResponses) DeleteLinksWithResponse(ctx context.Context, params *DeleteLinksParams, body DeleteLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteLinksResponse, error) {
	rsp, err := c.DeleteLinks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLinksResponse(rsp)
}

// GetLinksWithResponse request returning *GetLinksResponse
func (c *ClientWithResponses) GetLinksWithResponse(ctx context.Context, params *GetLinksParams, reqEditors ...RequestEditorFn) (*GetLinksResponse, error) {
	rsp, err := c.GetLinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinksResponse(rsp)
}

// PostLinksWithBodyWithResponse request with arbitrary body returning *PostLinksResponse
func (c *ClientWithResponses) PostLinksWithBodyWithResponse(ctx context.Context, params *PostLinksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLinksResponse, error) {
	rsp, err := c.PostLinksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksResponse(rsp)
}

func (c *ClientWithResponses) PostLinksWithResponse(ctx context.Context, params *PostLinksParams, body PostLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLinksResponse, error) {
	rsp, err := c.PostLinks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLinksResponse(rsp)
}

// DeleteTgChatIdWithResponse request returning *DeleteTgChatIdResponse
func (c *ClientWithResponses) DeleteTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteTgChatIdResponse, error) {
	rsp, err := c.DeleteTgChatId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTgChatIdResponse(rsp)
}

// GetTgChatIdWithResponse request returning *GetTgChatIdResponse
func (c *ClientWithResponses) GetTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetTgChatIdResponse, error) {
	rsp, err := c.GetTgChatId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTgChatIdResponse(rsp)
}

// PostTgChatIdWithResponse request returning *PostTgChatIdResponse
func (c *ClientWithResponses) PostTgChatIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostTgChatIdResponse, error) {
	rsp, err := c.PostTgChatId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTgChatIdResponse(rsp)
}

// ParseDeleteLinksResponse parses an HTTP response from a DeleteLinksWithResponse call
func ParseDeleteLinksResponse(rsp *http.Response) (*DeleteLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLinksResponse parses an HTTP response from a GetLinksWithResponse call
func ParseGetLinksResponse(rsp *http.Response) (*GetLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLinksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostLinksResponse parses an HTTP response from a PostLinksWithResponse call
func ParsePostLinksResponse(rsp *http.Response) (*PostLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteTgChatIdResponse parses an HTTP response from a DeleteTgChatIdWithResponse call
func ParseDeleteTgChatIdResponse(rsp *http.Response) (*DeleteTgChatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTgChatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTgChatIdResponse parses an HTTP response from a GetTgChatIdWithResponse call
func ParseGetTgChatIdResponse(rsp *http.Response) (*GetTgChatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTgChatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTgChatIdResponse parses an HTTP response from a PostTgChatIdWithResponse call
func ParsePostTgChatIdResponse(rsp *http.Response) (*PostTgChatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTgChatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
