// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/es-debug/backend-academy-2024-go-template/internal/api/openapi/v1/clients/scrapper"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockCache
func (_mock *MockCache) Add(ctx context.Context, chatID int64, link scrapperclient.LinkResponse) error {
	ret := _mock.Called(ctx, chatID, link)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, scrapperclient.LinkResponse) error); ok {
		r0 = returnFunc(ctx, chatID, link)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCache_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - link scrapperclient.LinkResponse
func (_e *MockCache_Expecter) Add(ctx interface{}, chatID interface{}, link interface{}) *MockCache_Add_Call {
	return &MockCache_Add_Call{Call: _e.mock.On("Add", ctx, chatID, link)}
}

func (_c *MockCache_Add_Call) Run(run func(ctx context.Context, chatID int64, link scrapperclient.LinkResponse)) *MockCache_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 scrapperclient.LinkResponse
		if args[2] != nil {
			arg2 = args[2].(scrapperclient.LinkResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Add_Call) Return(err error) *MockCache_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Add_Call) RunAndReturn(run func(ctx context.Context, chatID int64, link scrapperclient.LinkResponse) error) *MockCache_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCache
func (_mock *MockCache) Delete(ctx context.Context, chatID int64, req scrapperclient.RemoveLinkRequest) error {
	ret := _mock.Called(ctx, chatID, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, scrapperclient.RemoveLinkRequest) error); ok {
		r0 = returnFunc(ctx, chatID, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - req scrapperclient.RemoveLinkRequest
func (_e *MockCache_Expecter) Delete(ctx interface{}, chatID interface{}, req interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", ctx, chatID, req)}
}

func (_c *MockCache_Delete_Call) Run(run func(ctx context.Context, chatID int64, req scrapperclient.RemoveLinkRequest)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 scrapperclient.RemoveLinkRequest
		if args[2] != nil {
			arg2 = args[2].(scrapperclient.RemoveLinkRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return(err error) *MockCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(ctx context.Context, chatID int64, req scrapperclient.RemoveLinkRequest) error) *MockCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(ctx context.Context, chatID int64) (scrapperclient.ListLinksResponse, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 scrapperclient.ListLinksResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (scrapperclient.ListLinksResponse, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) scrapperclient.ListLinksResponse); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(scrapperclient.ListLinksResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockCache_Expecter) Get(ctx interface{}, chatID interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", ctx, chatID)}
}

func (_c *MockCache_Get_Call) Run(run func(ctx context.Context, chatID int64)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(listLinksResponse scrapperclient.ListLinksResponse, err error) *MockCache_Get_Call {
	_c.Call.Return(listLinksResponse, err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(ctx context.Context, chatID int64) (scrapperclient.ListLinksResponse, error)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}
