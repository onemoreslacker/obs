// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUpdateSender creates a new instance of MockUpdateSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateSender {
	mock := &MockUpdateSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpdateSender is an autogenerated mock type for the UpdateSender type
type MockUpdateSender struct {
	mock.Mock
}

type MockUpdateSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateSender) EXPECT() *MockUpdateSender_Expecter {
	return &MockUpdateSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockUpdateSender
func (_mock *MockUpdateSender) Send(ctx context.Context, chatID int64, url string, description string) error {
	ret := _mock.Called(ctx, chatID, url, description)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = returnFunc(ctx, chatID, url, description)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUpdateSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockUpdateSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - url string
//   - description string
func (_e *MockUpdateSender_Expecter) Send(ctx interface{}, chatID interface{}, url interface{}, description interface{}) *MockUpdateSender_Send_Call {
	return &MockUpdateSender_Send_Call{Call: _e.mock.On("Send", ctx, chatID, url, description)}
}

func (_c *MockUpdateSender_Send_Call) Run(run func(ctx context.Context, chatID int64, url string, description string)) *MockUpdateSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUpdateSender_Send_Call) Return(err error) *MockUpdateSender_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUpdateSender_Send_Call) RunAndReturn(run func(ctx context.Context, chatID int64, url string, description string) error) *MockUpdateSender_Send_Call {
	_c.Call.Return(run)
	return _c
}
