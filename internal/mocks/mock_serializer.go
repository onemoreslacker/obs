// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockSerializer creates a new instance of MockSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSerializer {
	mock := &MockSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSerializer is an autogenerated mock type for the Serializer type
type MockSerializer struct {
	mock.Mock
}

type MockSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSerializer) EXPECT() *MockSerializer_Expecter {
	return &MockSerializer_Expecter{mock: &_m.Mock}
}

// Serialize provides a mock function for the type MockSerializer
func (_mock *MockSerializer) Serialize(v any) ([]byte, error) {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) ([]byte, error)); ok {
		return returnFunc(v)
	}
	if returnFunc, ok := ret.Get(0).(func(any) []byte); ok {
		r0 = returnFunc(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSerializer_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockSerializer_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
//   - v any
func (_e *MockSerializer_Expecter) Serialize(v interface{}) *MockSerializer_Serialize_Call {
	return &MockSerializer_Serialize_Call{Call: _e.mock.On("Serialize", v)}
}

func (_c *MockSerializer_Serialize_Call) Run(run func(v any)) *MockSerializer_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSerializer_Serialize_Call) Return(bytes []byte, err error) *MockSerializer_Serialize_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSerializer_Serialize_Call) RunAndReturn(run func(v any) ([]byte, error)) *MockSerializer_Serialize_Call {
	_c.Call.Return(run)
	return _c
}
