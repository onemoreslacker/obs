// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// Done provides a mock function for the type MockCommand
func (_mock *MockCommand) Done() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCommand_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockCommand_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Done() *MockCommand_Done_Call {
	return &MockCommand_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockCommand_Done_Call) Run(run func()) *MockCommand_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Done_Call) Return(b bool) *MockCommand_Done_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCommand_Done_Call) RunAndReturn(run func() bool) *MockCommand_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockCommand
func (_mock *MockCommand) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCommand_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCommand_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Name() *MockCommand_Name_Call {
	return &MockCommand_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCommand_Name_Call) Run(run func()) *MockCommand_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Name_Call) Return(s string) *MockCommand_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCommand_Name_Call) RunAndReturn(run func() string) *MockCommand_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type MockCommand
func (_mock *MockCommand) Request(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommand_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockCommand_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCommand_Expecter) Request(ctx interface{}) *MockCommand_Request_Call {
	return &MockCommand_Request_Call{Call: _e.mock.On("Request", ctx)}
}

func (_c *MockCommand_Request_Call) Run(run func(ctx context.Context)) *MockCommand_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_Request_Call) Return(s string, err error) *MockCommand_Request_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockCommand_Request_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockCommand_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Stage provides a mock function for the type MockCommand
func (_mock *MockCommand) Stage() (string, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stage")
	}

	var r0 string
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (string, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockCommand_Stage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stage'
type MockCommand_Stage_Call struct {
	*mock.Call
}

// Stage is a helper method to define mock.On call
func (_e *MockCommand_Expecter) Stage() *MockCommand_Stage_Call {
	return &MockCommand_Stage_Call{Call: _e.mock.On("Stage")}
}

func (_c *MockCommand_Stage_Call) Run(run func()) *MockCommand_Stage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_Stage_Call) Return(s string, b bool) *MockCommand_Stage_Call {
	_c.Call.Return(s, b)
	return _c
}

func (_c *MockCommand_Stage_Call) RunAndReturn(run func() (string, bool)) *MockCommand_Stage_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockCommand
func (_mock *MockCommand) Validate(input string) error {
	ret := _mock.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockCommand_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - input string
func (_e *MockCommand_Expecter) Validate(input interface{}) *MockCommand_Validate_Call {
	return &MockCommand_Validate_Call{Call: _e.mock.On("Validate", input)}
}

func (_c *MockCommand_Validate_Call) Run(run func(input string)) *MockCommand_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCommand_Validate_Call) Return(err error) *MockCommand_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand_Validate_Call) RunAndReturn(run func(input string) error) *MockCommand_Validate_Call {
	_c.Call.Return(run)
	return _c
}
