// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDeserializer creates a new instance of MockDeserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeserializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeserializer {
	mock := &MockDeserializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDeserializer is an autogenerated mock type for the Deserializer type
type MockDeserializer struct {
	mock.Mock
}

type MockDeserializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeserializer) EXPECT() *MockDeserializer_Expecter {
	return &MockDeserializer_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function for the type MockDeserializer
func (_mock *MockDeserializer) Deserialize(r io.Reader, v any) error {
	ret := _mock.Called(r, v)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Reader, any) error); ok {
		r0 = returnFunc(r, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDeserializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockDeserializer_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - r io.Reader
//   - v any
func (_e *MockDeserializer_Expecter) Deserialize(r interface{}, v interface{}) *MockDeserializer_Deserialize_Call {
	return &MockDeserializer_Deserialize_Call{Call: _e.mock.On("Deserialize", r, v)}
}

func (_c *MockDeserializer_Deserialize_Call) Run(run func(r io.Reader, v any)) *MockDeserializer_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 io.Reader
		if args[0] != nil {
			arg0 = args[0].(io.Reader)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDeserializer_Deserialize_Call) Return(err error) *MockDeserializer_Deserialize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeserializer_Deserialize_Call) RunAndReturn(run func(r io.Reader, v any) error) *MockDeserializer_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}
