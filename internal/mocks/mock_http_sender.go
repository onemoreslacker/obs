// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	"github.com/es-debug/backend-academy-2024-go-template/internal/api/openapi/v1/clients/bot"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHTTPSender creates a new instance of MockHTTPSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPSender {
	mock := &MockHTTPSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPSender is an autogenerated mock type for the HTTPSender type
type MockHTTPSender struct {
	mock.Mock
}

type MockHTTPSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPSender) EXPECT() *MockHTTPSender_Expecter {
	return &MockHTTPSender_Expecter{mock: &_m.Mock}
}

// PostUpdates provides a mock function for the type MockHTTPSender
func (_mock *MockHTTPSender) PostUpdates(ctx context.Context, body botclient.PostUpdatesJSONRequestBody, reqEditors ...botclient.RequestEditorFn) (*http.Response, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PostUpdates")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, botclient.PostUpdatesJSONRequestBody, ...botclient.RequestEditorFn) (*http.Response, error)); ok {
		return returnFunc(ctx, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, botclient.PostUpdatesJSONRequestBody, ...botclient.RequestEditorFn) *http.Response); ok {
		r0 = returnFunc(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, botclient.PostUpdatesJSONRequestBody, ...botclient.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPSender_PostUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUpdates'
type MockHTTPSender_PostUpdates_Call struct {
	*mock.Call
}

// PostUpdates is a helper method to define mock.On call
//   - ctx context.Context
//   - body botclient.PostUpdatesJSONRequestBody
//   - reqEditors ...botclient.RequestEditorFn
func (_e *MockHTTPSender_Expecter) PostUpdates(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockHTTPSender_PostUpdates_Call {
	return &MockHTTPSender_PostUpdates_Call{Call: _e.mock.On("PostUpdates",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockHTTPSender_PostUpdates_Call) Run(run func(ctx context.Context, body botclient.PostUpdatesJSONRequestBody, reqEditors ...botclient.RequestEditorFn)) *MockHTTPSender_PostUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 botclient.PostUpdatesJSONRequestBody
		if args[1] != nil {
			arg1 = args[1].(botclient.PostUpdatesJSONRequestBody)
		}
		var arg2 []botclient.RequestEditorFn
		var variadicArgs []botclient.RequestEditorFn
		if len(args) > 2 {
			variadicArgs = args[2].([]botclient.RequestEditorFn)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHTTPSender_PostUpdates_Call) Return(response *http.Response, err error) *MockHTTPSender_PostUpdates_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHTTPSender_PostUpdates_Call) RunAndReturn(run func(ctx context.Context, body botclient.PostUpdatesJSONRequestBody, reqEditors ...botclient.RequestEditorFn) (*http.Response, error)) *MockHTTPSender_PostUpdates_Call {
	_c.Call.Return(run)
	return _c
}
