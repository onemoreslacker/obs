services:
    bot:
        build:
            context: ..
            dockerfile: ./docker/bot.Dockerfile
        ports:
            - "8081:8081"
        depends_on:
            database:
                condition: service_healthy
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    scrapper:
        build:
            context: ..
            dockerfile: ./docker/scrapper.Dockerfile
        ports:
            - "8080:8080"
        depends_on:
            database:
                condition: service_healthy
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    database:
        image: postgres:latest
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 2s
            timeout: 2s
            retries: 10
        volumes:
            - data:/var/lib/postgresql/data
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    redis:
        image: redis:latest
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 5
        restart: unless-stopped
        env_file: .env
        networks:
            - backend
    
    broker:
        image: apache/kafka:latest
        container_name: broker
        environment:
            KAFKA_NODE_ID: 1
            KAFKA_PROCESS_ROLES: broker,controller
            KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
            KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_NUM_PARTITIONS: 3
        networks:
            - backend

networks:
    backend:
        driver: bridge

volumes:
    data:
    redis-data: